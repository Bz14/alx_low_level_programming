!<arch>
0-isupper.c/    0           0     0     644     188       `
# include "main.h"
/**
 * _isupper - Check for uppercase
 *
 * @c: an integer
 *
 * Return: Always 1 or 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	return (0);
}
0-memset.c/     0           0     0     644     308       `
#include "main.h"
/**
 * _memset - fills byte of memory area by constant byte
 * @s: a pointer
 * @b: a constant byte
 * @n: a size
 * Return: a pointer
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned  int i;
	char **ptr = &s;

	for (i = 0; i < n; i++)
	{
		*(*ptr + i) = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     385       `
#include "main.h"
#include <string.h>
/**
 * _strcat - concatenates a string
 * @dest:  a string
 * @src: a string
 * Return: a pointer to a string
 */
char *_strcat(char *dest, char *src)
{
	int len = strlen(dest) - 1, j, i = strlen(src);

	*(dest + len) = ' ';
	len += 1;
	for (j = 0; j < i; ++j)
	{
		*(dest + len) = *(src + j);
		len++;
	}
	*(dest + len) = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     505       `
#include "main.h"
#include <string.h>
/**
 * _atoi - convert string to integer
 * @s: a string
 * Return: ann integer
 */
int _atoi(char *s)
{
	int i = 0, a = 0, n = 0, len = strlen(s), b = 0, digit = 0;

	while (i < len && b == 0)
	{
		if (s[i] == '-')
			++a;
		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (a % 2)
				digit = -digit;
			n = n * 10 + digit;
			b = 1;
		if (s[i + 1] < '0' || s[i + 1] > '9')
			break;
		b = 0;
		}
		i++;
	}
	if (b == 0)
		return (0);
	return (n);
}

1-isdigit.c/    0           0     0     644     190       `
#include "main.h"
/**
 * _isdigit - Check for a digit
 *
 * @c: an integer
 *
 * Return: Always return 0 or 1
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	return (0);
}
1-memcpy.c/     0           0     0     644     384       `
#include "main.h"
/**
 * _memcpy - copy memory area fro,m one to the other
 * @dest: a destination pointer
 * @src: a source ponter
 * @n: size to be copied
 * Return: a destination pointer
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	char **ptr = &src;
	char **pt = &dest;
	unsigned int i;

	for (i = 0; i < n; ++i)
	{
		*(*pt + i) = *(*ptr + i);
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     455       `
#include "main.h"
#include <string.h>
/**
 * _strncat - concatenates upto n bites
 * @dest: destination pointer
 * @src: source pointer
 * @n: bytes to be concatenate
 * Return: a pointer
 */
char *_strncat(char *dest, char *src, int n)
{
	int len = strlen(dest), j, i, srclen = strlen(src);

	if (n < srclen)
		i = n;
	else
		i = strlen(src);
	for (j = 0; j < i; ++j)
	{
		*(dest + len) = *(src + j);
		len++;
	}
	*(dest + len) = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     407       `
#include "main.h"
#include <string.h>
/**
 * _strchr - return the first occurence of a charcter in a string
 * @s: a pointer to a string
 * @c: a charcter
 * Return: a pointer to the first occurence of a character
 */
char *_strchr(char *s, char c)
{
	int i;
	char *ptr = NULL;

	for (i = 0; *(s + i) >= '\0'; ++i)
	{
		if (*(s + i) == c)
		{
			ptr = &(*(s + i));
			return (ptr);
		}
	}
	return (NULL);
}

2-strlen.c/     0           0     0     644     233       `
#include "main.h"
/**
 * _strlen - find the length of a string
 * @s: a string
 * Return: the length of a string
 */
int _strlen(char *s)
{
	int len = 0, i = 0;

	while (*(s + i) != '\0')
	{
		len += 1;
		i += 1;
	}
	return (len);
}

2-strncpy.c/    0           0     0     644     381       `
#include "main.h"
#include <string.h>
/**
 * _strncpy - copy a string
 * @dest: destination pointer
 * @src: source pointer
 * @n: n byte
 * Return: a destination pointer
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (i < n && *(src + i) != '\0')
	{
		*(dest + i) = *(src + i);
		i++;
	}
	while (i < n)
	{
		*(dest + i) = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     221       `
#include "main.h"
/**
 * _islower - check whether lowercase or not.
 *
 * @c: a single character
 *
 * Return: Always return 1 or 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     205       `
#include "main.h"
/**
 * _puts - print character to stdout
 * @str: a string
 */
void _puts(char *str)
{
	int i = 0;

	while (*(str + i) != '\0')
	{
		_putchar(*(str + i));
		i += 1;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     335       `
#include "main.h"
#include <string.h>
/**
 * _strcmp - compare strings
 * @s1: first string
 * @s2: second string
 * Return: an integer
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (*(s1 + i) != '\0' && *(s2 + i) != '\0')
	{
		if (*(s1 + i) != *(s2 + i))
		{
			return (*(s1 + i) - *(s2 + i));
		}
	i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     537       `
#include "main.h"
#include <string.h>
/**
 * _strspn - get length of prefix string
 * @s: a string pointer
 * @accept: a string to be searched
 * Return: number of byte
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, len = strlen(s), l = strlen(accept), found = 0;
	unsigned int count = 0;

	for (i = 0; i < len; i++)
	{
		for (j = 0; j < l; ++j)
		{
			if (*(s + i) == *(accept + j))
			{
				count += 1;
				found = 1;
				break;
			}
			else
			{
				found = 0;
			}
		}
		if (found == 0)
			break;
	}
	return (count);
}

4-isalpha.c/    0           0     0     644     215       `
#include "main.h"
/**
 *_isalpha - Determine whether alphabet or not
 *
 * @c: a single character
 *
 * Return: Always 0 or 1
 */
int _isalpha(int c)
{
	if (c >= 'A' && c <= 'z')
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     468       `
#include "main.h"
#include <string.h>
/**
 * _strpbrk - search a string for any set of byte
 * @s: a pointer string
 * @accept: a string to be searched
 * Return: a pointer to the byte
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j, len = strlen(s), l = strlen(accept);
	char *ptr = NULL;

	for (i = 0; i < len ; ++i)
	{
		for (j = 0; j < l ; ++j)
		{
			if (*(s + i) == *(accept + j))
			{
				ptr = &(*(s + i));
				return (ptr);
			}
		}
	}
	return (ptr);
}
5-strstr.c/     0           0     0     644     439       `
#include "main.h"
#include <string.h>
/**
 * _strstr - locate a substring
 * @haystack: a pointer string
 * @needle: a substring to be searched
 * Return: resturn a pointer to the occurnce
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}
		if (*p == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.c/        0           0     0     644     208       `
#include "main.h"
/**
 * _abs - Comput absolute value of integer
 *
 * @n: an integer number
 *
 * Return: absolute value of a number
 */
int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (-(n));
}
9-strcpy.c/     0           0     0     644     300       `
#include "main.h"
#include <string.h>
/**
 * _strcpy - copy a string
 * @dest: a pointer
 * @src: a pointer
 * Return: a pointer
 */
char *_strcpy(char *dest, char *src)
{
	int i, len = strlen(src);

	for (i = 0; i < len; ++i)
	{
		*(dest + i) = *(src + i);
	}
	*(dest + i) = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
  return (write(1, &c, 1));
}
